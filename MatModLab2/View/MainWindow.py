# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets, QtWebEngineWidgets
from PyQt5.QtWidgets import QSizePolicy

from View.NewSystemWindow import Ui_Dialog
import math
import tempfile
import os
from plotly.io import to_html
import plotly.graph_objs as go
import numpy as np


class Ui_MainWindow(object):
    def __init__(self):
        self.system_parameters = SystemParametersWindow()
        self.populations = 0

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(1920, 1080)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(9, 9, 1900, 1040))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.web = PlotlyViewer()
        self.horizontalLayout.addWidget(self.web, 0)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        MainWindow.setMenuBar(self.menubar)

        self.action = QtWidgets.QAction(MainWindow)
        self.action.setObjectName("action")
        self.action.triggered.connect(self.openNewSystemWindow)
        self.action_2 = QtWidgets.QAction(MainWindow)
        self.action_2.setObjectName("action_2")
        self.action_2.triggered.connect(self.openNewSystemParameters)
        self.action_2.setEnabled(False)

        self.menu.addAction(self.action)
        self.menu_2.addAction(self.action_2)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menu.setTitle(_translate("MainWindow", "Файл"))
        self.menu_2.setTitle(_translate("MainWindow", "Параметры"))
        self.action.setText(_translate("MainWindow", "Новая система"))
        self.action_2.setText(_translate("MainWindow", "Параметры системы"))

    def openNewSystemWindow(self):
        dlg = NewSystemWindow(self)
        dlg.show()
        dlg.exec()

    def openNewSystemParameters(self, value: int = 2, flag: int = 1):
        if self.populations != 0:
            self.system_parameters.setTable(self.populations, flag=flag)
        else:
            self.system_parameters.setTable(value, flag=flag)
        self.action_2.setEnabled(True)
        self.system_parameters.show()
        self.system_parameters.exec()

    def setFigure(self, fig):
        self.web.set_figure(fig)


class NewSystemWindow(QtWidgets.QDialog):
    def __init__(self, _mainWindow, parent=None):
        super(NewSystemWindow, self).__init__(parent)

        self.mainWindow = _mainWindow

        self.setWindowTitle("Новая система")
        self.setFixedSize(350, 200)

        QBtn = QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel

        self.buttonBox = QtWidgets.QDialogButtonBox(QBtn)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)

        self.layout = QtWidgets.QVBoxLayout()
        self.message = QtWidgets.QLabel("Введите количество популяций:")
        self.lineEdit = QtWidgets.QLineEdit()
        self.layout.addWidget(self.message)
        self.layout.addWidget(self.lineEdit)
        self.layout.addWidget(self.buttonBox)
        self.setLayout(self.layout)

    def accept(self) -> None:
        try:
            value = int(self.lineEdit.text())
            if value < 2:
                value = 2
        except:
            value = 2
        self.mainWindow.populations = value
        self.mainWindow.openNewSystemParameters(value, flag=0)
        self.setVisible(False)


class SystemParametersWindow(QtWidgets.QDialog):
    def __init__(self, value: int = 2, flag: int = 1, parent=None):
        super(SystemParametersWindow, self).__init__(parent)

        self.populations = value
        self.flag = flag
        self.data = dict()

        self.setWindowTitle("Новая система")
        self.setFixedSize(637, 527)

        self.verticalLayoutWidget = QtWidgets.QWidget(self)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(9, 9, 621, 511))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.lineEdit = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.lineEdit.setObjectName("lineEdit")
        self.verticalLayout_2.addWidget(self.lineEdit)
        self.label_3 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_2.addWidget(self.label_3)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.verticalLayout_2.addWidget(self.lineEdit_2)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label.setObjectName("label")
        self.verticalLayout_3.addWidget(self.label)
        self.comboBox = QtWidgets.QComboBox(self.verticalLayoutWidget)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.verticalLayout_3.addWidget(self.comboBox)
        self.horizontalLayout.addLayout(self.verticalLayout_3)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_4 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_4.addWidget(self.label_4)
        self.lineEdit_4 = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.verticalLayout_4.addWidget(self.lineEdit_4)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.verticalLayout_4.addWidget(self.lineEdit_3)
        self.horizontalLayout.addLayout(self.verticalLayout_4)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.tableWidget = QtWidgets.QTableWidget(self.verticalLayoutWidget)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(2)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setItem(1, 1, item)
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.tableWidget.verticalHeader().setStretchLastSection(False)
        self.horizontalLayout_2.addWidget(self.tableWidget)
        self.tableWidget_2 = QtWidgets.QTableWidget(self.verticalLayoutWidget)
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(2)
        self.tableWidget_2.setRowCount(2)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setItem(1, 1, item)
        self.tableWidget_2.horizontalHeader().setStretchLastSection(True)
        self.horizontalLayout_2.addWidget(self.tableWidget_2)
        self.verticalLayout.addLayout(self.horizontalLayout_2)

        self.retranslateUi(self)
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Параметры системы"))
        self.pushButton.setText(_translate("Dialog", "Ввести"))
        self.label_2.setText(_translate("Dialog", "Шаг дифференциирования"))
        self.lineEdit.setText(_translate("Dialog", "1.0"))
        self.label_3.setText(_translate("Dialog", "Время моделирования"))
        self.lineEdit_2.setText(_translate("Dialog", "1000"))
        self.label.setText(_translate("Dialog", "Тип графиков"))
        self.comboBox.setItemText(0, _translate("Dialog", "Стандартные"))
        self.comboBox.setItemText(1, _translate("Dialog", "Фазовые кривые"))
        self.label_4.setText(_translate("Dialog", "Индексы"))
        self.lineEdit_4.setText(_translate("Dialog", "0"))
        self.lineEdit_3.setText(_translate("Dialog", "0"))
        item = self.tableWidget.verticalHeaderItem(0)
        item.setText(_translate("Dialog", "0"))
        item = self.tableWidget.verticalHeaderItem(1)
        item.setText(_translate("Dialog", "1"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "Количество"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Dialog", "Прирост"))
        __sortingEnabled = self.tableWidget.isSortingEnabled()
        self.tableWidget.setSortingEnabled(False)
        item = self.tableWidget.item(0, 0)
        item.setText(_translate("Dialog", "100"))
        item = self.tableWidget.item(0, 1)
        item.setText(_translate("Dialog", "0.01"))
        item = self.tableWidget.item(1, 0)
        item.setText(_translate("Dialog", "200"))
        item = self.tableWidget.item(1, 1)
        item.setText(_translate("Dialog", "-0.01"))
        self.tableWidget.setSortingEnabled(__sortingEnabled)
        item = self.tableWidget_2.verticalHeaderItem(0)
        item.setText(_translate("Dialog", "0"))
        item = self.tableWidget_2.verticalHeaderItem(1)
        item.setText(_translate("Dialog", "1"))
        item = self.tableWidget_2.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "0"))
        item = self.tableWidget_2.horizontalHeaderItem(1)
        item.setText(_translate("Dialog", "1"))
        __sortingEnabled = self.tableWidget_2.isSortingEnabled()
        self.tableWidget_2.setSortingEnabled(False)
        item = self.tableWidget_2.item(0, 0)
        item.setText(_translate("Dialog", "0.0"))
        item = self.tableWidget_2.item(0, 1)
        item.setText(_translate("Dialog", "-0.0001"))
        item = self.tableWidget_2.item(1, 0)
        item.setText(_translate("Dialog", "0.0001"))
        item = self.tableWidget_2.item(1, 1)
        item.setText(_translate("Dialog", "0.0"))
        self.tableWidget_2.setSortingEnabled(__sortingEnabled)

    def setTable(self, value, flag):
        self.populations = value
        self.flag = flag

        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(value)
        self.tableWidget_2.setColumnCount(value)
        self.tableWidget_2.setRowCount(value)

        number = []
        up = []

        row_num = [str(i) for i in range(0, value)]
        self.tableWidget.setVerticalHeaderLabels(row_num)
        self.tableWidget_2.setVerticalHeaderLabels(row_num)
        self.tableWidget_2.setHorizontalHeaderLabels(row_num)

        if self.flag == 0:
            for j in range(0, 2):
                for i in range(0, value):
                    item = QtWidgets.QTableWidgetItem()
                    temp = 0
                    if j == 0:
                        temp = 100 * (i + 1)
                        number.append(str(temp))
                    elif j == 1:
                        if i == 0:
                            temp = 0.01
                        else:
                            temp = -0.01
                        up.append(str(temp))
                    item.setText(str(temp))
                    self.tableWidget.setItem(i, j, item)
            matrix = []
            for i in range(0, value):
                matrix.append([])
                for j in range(0, value):
                    matrix[i].append(str(0.0))
            for i in range(0, value):
                for j in range(i, value):
                    temp = -0.0001
                    matrix[i][j] = str(temp)
                    matrix[j][i] = str(temp * -1)
                    if i == j:
                        matrix[i][j] = str(0.0)
            for i in range(0, value):
                for j in range(0, value):
                    item = QtWidgets.QTableWidgetItem()
                    item.setText(matrix[i][j])
                    self.tableWidget_2.setItem(i, j, item)

            self.lineEdit.setText("1.0")
            self.lineEdit_2.setText("1000")
            self.lineEdit_4.setText("0")
            self.lineEdit_3.setText("0")
            self.comboBox.setCurrentText("Стандартные")

            data = {
                "number": number,
                "up": up,
                "matrix": matrix,
                "dif_step": "1.0",
                "total_time": "1000",
                "gr_type": "Стандартные",
                "ind_1": "0",
                "ind_2": "0"
            }

            self.data = data
        else:
            for i in range(0, value):
                for j in range(0, value):
                    item = QtWidgets.QTableWidgetItem()
                    item.setText(self.data["matrix"][i][j])
                    self.tableWidget_2.setItem(i, j, item)
            for j in range(0, 2):
                for i in range(0, value):
                    item = QtWidgets.QTableWidgetItem()
                    if j == 0:
                        item.setText(self.data["number"][i])
                    elif j == 1:
                        item.setText(self.data["up"][i])
                    self.tableWidget.setItem(i, j, item)
            self.lineEdit.setText(self.data["dif_step"])
            self.lineEdit_2.setText(self.data["total_time"])
            self.lineEdit_4.setText(self.data["ind_1"])
            self.lineEdit_3.setText(self.data["ind_2"])
            self.comboBox.setCurrentText(self.data["gr_type"])

    def reject(self) -> None:
        number = []
        up = []

        for j in range(0, 2):
            for i in range(0, self.populations):
                if j == 0:
                    number.append(self.tableWidget.item(i, j).text())
                elif j == 1:
                    up.append(self.tableWidget.item(i, j).text())

        matrix = []
        for i in range(0, self.populations):
            matrix.append([])
            for j in range(0, self.populations):
                matrix[i].append(str(0.0))

        for i in range(0, self.populations):
            for j in range(0, self.populations):
                matrix[i][j] = self.tableWidget_2.item(i, j).text()

        data = {
            "number": number,
            "up": up,
            "matrix": matrix,
            "dif_step": self.lineEdit.text(),
            "total_time": self.lineEdit_2.text(),
            "gr_type": self.comboBox.currentText(),
            "ind_1": self.lineEdit_4.text(),
            "ind_2": self.lineEdit_3.text()
        }

        self.data = data
        return super().reject()


class PlotlyViewer(QtWebEngineWidgets.QWebEngineView):
    def __init__(self, fig=None):
        super().__init__()
        self.page().profile().downloadRequested.connect(self.on_downloadRequested)

        self.settings().setAttribute(self.settings().ShowScrollBars, False)
        self.settings().setAttribute(QtWebEngineWidgets.QWebEngineSettings.WebGLEnabled, True)

        self.temp_file = tempfile.NamedTemporaryFile(mode="w", suffix=".html", delete=False)
        self.set_figure(fig)

    def set_figure(self, fig=None):
        self.temp_file.seek(0)
        if fig is None:
            fig = go.Figure()
        fig.update_xaxes(showspikes=True)
        fig.update_yaxes(showspikes=True)
        html = to_html(fig, config={"responsive": True, 'scrollZoom': True})
        html += "\n<style>body{margin: 0;}" \
                "\n.plot-container,.main-svg,.svg-container{width:100% !important; height:100% !important;}</style>"

        self.temp_file.write(html)
        self.temp_file.truncate()
        self.temp_file.seek(0)
        self.load(QtCore.QUrl.fromLocalFile(self.temp_file.name))

    def closeEvent(self, event: QtGui.QCloseEvent) -> None:
        self.temp_file.close()
        os.unlink(self.temp_file.name)
        super().closeEvent(event)

    def on_downloadRequested(self, download):
        dialog = QtWidgets.QFileDialog()
        dialog.setDefaultSuffix(".png")
        path, _ = dialog.getSaveFileName(self, "Save File", os.path.join(os.getcwd(), "newplot.png"), "*.png")
        if path:
            download.setPath(path)
            download.accept()
